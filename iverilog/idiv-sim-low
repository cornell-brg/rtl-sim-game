#!/usr/bin/env python
#=========================================================================
# idiv-sim-low [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --cycle             number of cycles
#  --trace             Display line tracing
#  --vsrc              {verilog, chisel}

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------
import argparse, os, sys, timeit
from subprocess import check_output, CalledProcessError

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--cycle", default=100, type=int )
  p.add_argument( "--trace", action="store_true"    )
  p.add_argument( "--vsrc",  required=True, choices=["verilog","chisel"] )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

def main():
  # + Capture compilation time!
  compilation_start_time = timeit.default_timer()

  opts = parse_cmdline()

  folder = "verilog_src" if opts.vsrc == "verilog" else "chisel"

  compile_command = [ "iverilog", "-s", "top", "-g2012", "-Wall",  "-Wno-sensitivity-entire-vector",
                      "-Wno-sensitivity-entire-array", "-I.." ,"../{}/idiv-sim-low-{}.v".format(folder, opts.vsrc),
                      "-o", "idiv-sim-low-{}-exe".format(opts.vsrc) ]
  try:
    result = check_output( compile_command ).strip()
  except CalledProcessError as e:
    raise Exception( "Error compile using iverilog!\n\n"
                     "Compiling command: {cmd}\n\n"
                     .format( cmd=' '.join(e.cmd) ) )

  execute_command = [ "./idiv-sim-low-{}-exe".format(opts.vsrc),
                      "+trace={}".format(int(opts.trace)),
                      "+cycle={}".format(opts.cycle) ]

  # - Capture compilation time!
  compilation_time = timeit.default_timer() - compilation_start_time

  # Now time the execution

  start_time = timeit.default_timer()
  
  try:
    result = check_output( execute_command ).strip()
  except CalledProcessError as e:
    raise Exception( "Error running the compiled simulator!\n\n"
                     "Simulator command line: {cmd}\n\n"
                     "Simulator output:\n {output}"
                     .format( cmd=' '.join(e.cmd), output=e.output ) )

  end_time = timeit.default_timer()

  print "Compilation: {:.3f} sec | {}: {:8.0f} cps = {:11d} cycles / {:.3f} sec [iverilog-{}]".format \
        ( compilation_time, result, opts.cycle/(end_time - start_time), opts.cycle, end_time - start_time, opts.vsrc )


main()
