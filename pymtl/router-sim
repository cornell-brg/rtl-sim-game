#!/usr/bin/env python
#=========================================================================
# idiv-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --cycle             number of cycles
#  --trace             Display line tracing

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------
import argparse, os, sys, timeit, random
random.seed(0xdeadbeee)

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".project-root-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)
sys.path.insert(0, os.path.join(os.path.dirname(sim_dir),"pymtl") )

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--cycle", default=100, type=int )
  p.add_argument( "--trace", action="store_true"    )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

from pymtl import *
from MeshRouter import MeshRouter
from router_input.python_input import side, num_messages, inp, payload_nbits, id_x, id_y, msgcount, msg_nbits

def main():
  # + Capture compilation time!
  compilation_start_time = timeit.default_timer()

  try:
    import pypyjit
    pypyjit.set_param("default")
    pypyjit.set_param("trace_limit=100000000")
  except:
    pass

  opts    = parse_cmdline()
  ncycles = opts.cycle

  router = MeshRouter( side, num_messages, payload_nbits )
  router.elaborate()

  sim = SimulationTool( router )
  sim.reset()

  router.router_id.value = id_x*side+id_y

  # - Capture compilation time!
  compilation_time = timeit.default_timer() - compilation_start_time

  # Now time the execution

  start_time = timeit.default_timer()
  for cycle in xrange(ncycles):
    idx = cycle % msgcount

    for i in xrange(5):
      router.out[i].rdy.value = Bits( 1, 1 )
      router.in_[i].val.value = Bits( 1, 1 )
      router.in_[i].msg.value = Bits( msg_nbits, inp[i][idx] )

    sim.cycle()

    if opts.trace:
      print router.line_trace()

  end_time = timeit.default_timer()

  print "Compilation: {:.3f} sec | router: {:8.0f} cps = {:11d} cycles / {:.3f} sec [mamba]".format \
        ( compilation_time, ncycles/(end_time - start_time), ncycles, end_time - start_time )

main()
