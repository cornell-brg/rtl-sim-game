#!/usr/bin/env python
#=========================================================================
# idiv-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --cycle             number of cycles
#  --trace             Display line tracing

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------
import argparse, os, sys, timeit

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl-python-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

sys.path.insert(0, os.path.join(os.path.dirname(sim_dir),"pymtl-v3") )

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--cycle", default=100, type=int )
  p.add_argument( "--nbits", default=64, type=int )
  p.add_argument( "--trace", action="store_true"    )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

from pymtl import *
from IntDivRem4 import IntDivRem4

def main():
  try:
    import pypyjit
    pypyjit.set_param("off")
  except:
    pass

  opts = parse_cmdline()

  nbits = opts.nbits

  idiv = IntDivRem4( nbits )
  SimRTLPass().apply( idiv )
  idiv.sim_reset()

  # Multiple runs don't make a different since jit trace is shared

  ncycles = opts.cycle

  try:
    pypyjit.set_param("default")
    pypyjit.set_param("trace_limit=100000000")
  except:
    pass

  dtype = mk_bits( nbits*2 )

  from divider_input.python_input import inp, oup

  l = len(inp)
  ans = passed = 0

  start_time = timeit.default_timer()
  for cycle in xrange(ncycles):
    idiv.resp.rdy = Bits1( 1 )
    idiv.req.val  = Bits1( 1 )
    idiv.req.msg  = dtype( inp[cycle % l] )

    idiv.tick()

    if idiv.req.rdy:
      ans = oup[cycle % l]

    if idiv.resp.val:
      assert idiv.resp.msg == ans
      passed += 1

    if opts.trace:
      print idiv.line_trace()

  end_time = timeit.default_timer()

  print "[{} passed] idiv: {:8.0f} cps = {:11d} cycles / {:.3f} sec".format \
        ( passed, ncycles/(end_time - start_time), ncycles, end_time - start_time )

main()
